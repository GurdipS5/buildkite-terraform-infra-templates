# .buildkite/templates/smart-terraform-template.yml
# Smart Terraform Template Pipeline - Handles All Logic

env:
  # System configuration
  VAULT_ADDR: "https://vault.company.com"

steps:
  # ====================
  # VERSIONING & VALIDATION PHASE
  # ====================
  
  - label: ":1234: Semantic Versioning"
    key: "semantic-versioning"
    command: |
      Write-Host "--- Generating semantic version for {{inputs.project_name}}"
      
      # Determine if this is main branch or PR
      $isMainBranch = ($env:BUILDKITE_BRANCH -eq "main" -or $env:BUILDKITE_BRANCH -eq "master")
      $isPullRequest = ($env:BUILDKITE_PULL_REQUEST -and $env:BUILDKITE_PULL_REQUEST -ne "false")
      
      Write-Host "Branch: $env:BUILDKITE_BRANCH"
      Write-Host "Is main branch: $isMainBranch"
      Write-Host "Is pull request: $isPullRequest"
      
      # Generate version
      if ($isMainBranch) {
        .\scripts\generate-version.ps1 -OutputPath "version-info.json" -IsMainBranch
      } elseif ($isPullRequest) {
        .\scripts\generate-version.ps1 -OutputPath "version-info.json" -IsPullRequest
      } else {
        .\scripts\generate-version.ps1 -OutputPath "version-info.json"
      }
      
      buildkite-agent artifact upload "version-info.json"
      Write-Host "✅ Semantic versioning completed for {{inputs.project_name}}"
    artifact_paths:
      - "version-info.json"
    agents:
      queue: "windows"
    if: build.env("ENABLE_SEMANTIC_VERSIONING") == "true"

  - label: ":memo: Validate Conventional Commits"
    key: "validate-commits"
    command: |
      Write-Host "--- Validating conventional commit messages for {{inputs.project_name}}"
      
      # Install Node.js dependencies from consumer repo
      if (Test-Path "package.json") {
        Write-Host "Installing NPM dependencies from consumer repo..."
        npm install
      } else {
        Write-Host "No package.json found, installing commitlint manually..."
        npm install --no-save @commitlint/cli @commitlint/config-conventional
      }
      
      # Use commitlint config from consumer repo
      $commitlintConfig = if (Test-Path "commitlint.config.js") { 
        "commitlint.config.js" 
      } else { 
        Write-Warning "commitlint.config.js not found in consumer repo, using default config"
        "@commitlint/config-conventional"
      }
      
      Write-Host "Using commitlint config: $commitlintConfig"
      
      # Validate commit messages
      if (Test-Path "commitlint.config.js") {
        .\scripts\validate-conventional-commits.ps1 -ConfigPath $commitlintConfig
      } else {
        # Use default validation if no config file
        npx commitlint --from=HEAD~1 --to=HEAD --config '@commitlint/config-conventional'
      }
      
      Write-Host "✅ Conventional commit validation completed"
    agents:
      queue: "windows"
    if: build.env("VALIDATE_CONVENTIONAL_COMMITS") == "true"

  # ====================
  # BUILD & VALIDATION PHASE
  # ====================
  
  - label: ":hammer: Code Formatting Check"
    key: "format-check"
    command: |
      Write-Host "--- Checking OpenTofu formatting for {{inputs.project_name}}"
      tofu fmt -check -recursive
      
      Write-Host "--- Checking for trailing whitespace and other formatting issues"
      $files = Get-ChildItem -Recurse -Filter "*.tf" | Where-Object { (Get-Content $_.FullName -Raw) -match '\s+$' }
      if ($files) {
        Write-Host "Trailing whitespace found in the following files:"
        $files | ForEach-Object { Write-Host $_.FullName }
        exit 1
      }
      
      Write-Host "--- Validating Terraform file structure"
      $requiredFiles = @("main.tf", "variables.tf", "outputs.tf", "versions.tf")
      foreach ($file in $requiredFiles) {
        if (-not (Test-Path $file)) {
          Write-Host "❌ Required file missing: $file"
          exit 1
        }
      }
      
      Write-Host "✅ All formatting checks passed for {{inputs.project_name}}"
    agents:
      queue: "windows"

  - label: ":shield: Security Scanning Suite"
    key: "security-scan"
    depends_on: "format-check"
    command: |
      Write-Host "--- Running {{inputs.security_scan_level}} security scanning for {{inputs.project_name}}"
      
      New-Item -ItemType Directory -Force -Path "security-reports"
      
      # Authenticate to Vault for Mondoo and other secrets
      Write-Host "--- Authenticating to Vault"
      export VAULT_TOKEN=$(vault write -field=token auth/jwt/login \
        role=buildkite-role \
        jwt="$env:BUILDKITE_JWT_TOKEN")
      
      # Get Mondoo token from Vault
      Write-Host "--- Retrieving Mondoo credentials from Vault"
      $env:MONDOO_API_TOKEN = vault kv get -field=token {{inputs.vault_namespace}}/secret/data/mondoo
      
      # GitGuardian secret scanning
      if ($env:ENABLE_SECRET_SCANNING -eq "true") {
        Write-Host "--- Running GitGuardian secret scanning"
        $env:GITGUARDIAN_API_KEY = vault kv get -field=api_key secret/gitguardian/api
        
        # Use GitGuardian config from consumer repo
        $gitguardianConfig = if (Test-Path ".gitguardian.yml") { 
          ".gitguardian.yml" 
        } else { 
          Write-Warning ".gitguardian.yml not found in consumer repo, using default settings"
          $null
        }
        
        if ($gitguardianConfig) {
          Write-Host "Using GitGuardian config: $gitguardianConfig"
          .\scripts\run-gitguardian-scan.ps1 -OutputPath "security-reports/gitguardian-results.json" -ConfigPath $gitguardianConfig
        } else {
          Write-Host "Using default GitGuardian settings"
          .\scripts\run-gitguardian-scan.ps1 -OutputPath "security-reports/gitguardian-results.json"
        }
      }
      
      # Run Mondoo security scanning
      Write-Host "--- Running Mondoo security scanning"
      mondoo scan . --format json --output security-reports/mondoo-results.json
      
      # Basic security scanning (always run)
      Write-Host "--- Running TFSec"
      Invoke-WebRequest -Uri "https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-windows-amd64.exe" -OutFile "tfsec.exe"
      .\tfsec.exe --format json --out security-reports/tfsec-results.json .
      
      if ("{{inputs.security_scan_level}}" -eq "standard" -or "{{inputs.security_scan_level}}" -eq "comprehensive") {
        Write-Host "--- Running Checkov"
        pip install checkov
        checkov -d . --framework terraform --output json --output-file security-reports/checkov-results.json
      }
      
      if ("{{inputs.security_scan_level}}" -eq "comprehensive") {
        Write-Host "--- Running Terrascan"
        Invoke-WebRequest -Uri "https://github.com/tenable/terrascan/releases/latest/download/terrascan_Windows_x86_64.tar.gz" -OutFile "terrascan.tar.gz"
        tar -xzf terrascan.tar.gz
        .\terrascan.exe scan -t terraform -f json -o security-reports/terrascan-results.json
        
        Write-Host "--- Running KICS security scanner"
        docker run --rm -v ${PWD}:/path checkmarx/kics:latest scan -p /path -o /path/security-reports/kics-results.json --report-formats json
      }
      
      Write-Host "--- Aggregating security results"
      .\scripts\aggregate-security-results.ps1 -OutputPath "security-reports/security-summary.html"
      
      Write-Host "--- Generating security HTML report"
      .\scripts\generate-security-report.ps1 -SecuritySummaryJson "security-reports/security-summary.json" -OutputPath "security-reports/security-summary.html"
      
      $securitySummary = Get-Content "security-reports/security-summary.json" | ConvertFrom-Json
      if ($securitySummary.critical_issues -gt 0) {
        Write-Host "❌ Critical security issues found: $($securitySummary.critical_issues)"
        exit 1
      }
      
      # Check compliance score against minimum requirement
      if ($securitySummary.compliance_score -lt {{inputs.min_compliance_score}}) {
        Write-Host "❌ Compliance score $($securitySummary.compliance_score) below minimum requirement of {{inputs.min_compliance_score}}"
        exit 1
      }
      
      buildkite-agent artifact upload "security-reports\**\*"
      Write-Host "✅ Security scanning completed for {{inputs.project_name}}"
    artifact_paths:
      - "security-reports\\**\\*"
    env:
      VAULT_ADDR: "https://vault.company.com"
      VAULT_NAMESPACE: "{{inputs.vault_namespace}}"
    agents:
      queue: "windows"

  - label: ":mag: OpenTofu Validation & Planning"
    key: "tofu-validate"
    depends_on: "format-check"
    command: |
      Write-Host "--- Authenticating to Vault for {{inputs.project_name}}"
      export VAULT_TOKEN=$(vault write -field=token auth/jwt/login \
        role=buildkite-role \
        jwt="$env:BUILDKITE_JWT_TOKEN")
      
      Write-Host "--- Retrieving MinIO credentials"
      $env:AWS_ACCESS_KEY_ID = vault kv get -field=access_key secret/minio/terraform
      $env:AWS_SECRET_ACCESS_KEY = vault kv get -field=secret_key secret/minio/terraform
      
      Write-Host "--- Retrieving Mondoo credentials"
      $env:TF_VAR_mondoo_service_account_token = vault kv get -field=token {{inputs.vault_namespace}}/secret/data/mondoo
      
      Write-Host "--- Setting project context variables"
      $env:TF_VAR_project_name = "{{inputs.project_name}}"
      $env:TF_VAR_service_name = "{{inputs.service_name}}"
      $env:TF_VAR_team_name = "{{inputs.team_name}}"
      
      Write-Host "--- Initializing OpenTofu"
      tofu init
      
      Write-Host "--- Validating OpenTofu configuration"
      tofu validate
      
      Write-Host "--- Running OpenTofu plan"
      tofu plan -out=tfplan
      
      Write-Host "--- Generating plan JSON for analysis"
      tofu show -json tfplan | Out-File -FilePath "tfplan.json" -Encoding utf8
      
      buildkite-agent artifact upload "tfplan"
      buildkite-agent artifact upload "tfplan.json"
      Write-Host "✅ OpenTofu validation completed"
    artifact_paths:
      - "tfplan"
      - "tfplan.json"
    env:
      VAULT_ADDR: "https://vault.company.com"
      VAULT_NAMESPACE: "{{inputs.vault_namespace}}"
    agents:
      queue: "windows"

  - label: ":shield: Policy Validation with OCI Packages"
    key: "policy-validation"
    depends_on: "tofu-validate"
    command: |
      Write-Host "--- Installing Conftest"
      Invoke-WebRequest -Uri "https://github.com/open-policy-agent/conftest/releases/latest/download/conftest_Windows_x86_64.zip" -OutFile "conftest.zip"
      Expand-Archive -Path "conftest.zip" -DestinationPath "."
      
      Write-Host "--- Authenticating to Vault"
      export VAULT_TOKEN=$(vault write -field=token auth/jwt/login \
        role=buildkite-role \
        jwt="$env:BUILDKITE_JWT_TOKEN")
      
      # Get Harbor credentials
      $harborUsername = vault kv get -field=username secret/harbor/terraform
      $harborPassword = vault kv get -field=password secret/harbor/terraform
      
      Write-Host "--- Logging into Harbor registry"
      echo $harborPassword | docker login {{inputs.harbor_registry}} --username $harborUsername --password-stdin
      
      Write-Host "--- Pulling Conftest policies from OCI package"
      Write-Host "Policy URL: {{inputs.conftest_policy_oci_url}}"
      
      # Pull the OCI package containing policies
      .\conftest.exe pull {{inputs.conftest_policy_oci_url}}
      
      Write-Host "--- Downloading Terraform plan"
      buildkite-agent artifact download "tfplan.json" .
      
      # Parse namespaces
      $namespaces = "{{inputs.conftest_policy_namespace}}" -split "," | ForEach-Object { $_.Trim() }
      
      Write-Host "--- Running policy validation against namespaces: $($namespaces -join ', ')"
      
      $overallResult = $true
      $allResults = @()
      
      foreach ($namespace in $namespaces) {
        Write-Host "--- Testing namespace: $namespace"
        
        try {
          # Run conftest with specific namespace
          $result = .\conftest.exe test --namespace $namespace --output json tfplan.json 2>&1
          $exitCode = $LASTEXITCODE
          
          if ($exitCode -eq 0) {
            Write-Host "✅ Policy validation passed for namespace: $namespace"
            $namespaceResult = @{
              namespace = $namespace
              status = "passed"
              violations = @()
              warnings = @()
            }
          } else {
            Write-Host "❌ Policy violations found in namespace: $namespace"
            $overallResult = $false
            
            # Parse JSON result if available
            try {
              $jsonResult = $result | ConvertFrom-Json
              $namespaceResult = @{
                namespace = $namespace
                status = "failed"
                violations = $jsonResult.failures
                warnings = $jsonResult.warnings
              }
              
              # Display violations
              if ($jsonResult.failures) {
                Write-Host "Violations in $namespace:"
                foreach ($failure in $jsonResult.failures) {
                  Write-Host "  • $($failure.msg)"
                }
              }
              
              if ($jsonResult.warnings) {
                Write-Host "Warnings in $namespace:"
                foreach ($warning in $jsonResult.warnings) {
                  Write-Host "  • $($warning.msg)"
                }
              }
            } catch {
              $namespaceResult = @{
                namespace = $namespace
                status = "error"
                error = $result
              }
            }
          }
        } catch {
          Write-Host "❌ Error testing namespace $namespace : $($_.Exception.Message)"
          $overallResult = $false
          $namespaceResult = @{
            namespace = $namespace
            status = "error"
            error = $_.Exception.Message
          }
        }
        
        $allResults += $namespaceResult
      }
      
      # Generate comprehensive policy report
      $policyReport = @{
        project = "{{inputs.project_name}}"
        oci_package = "{{inputs.conftest_policy_oci_url}}"
        namespaces_tested = $namespaces
        overall_result = if ($overallResult) { "passed" } else { "failed" }
        test_timestamp = Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"
        namespace_results = $allResults
        build_url = $env:BUILDKITE_BUILD_URL
        commit = $env:BUILDKITE_COMMIT
      }
      
      $policyReport | ConvertTo-Json -Depth 4 | Out-File -FilePath "policy-report.json" -Encoding utf8
      
      Write-Host "--- Generating policy HTML report"
      .\scripts\generate-policy-report.ps1 -PolicyReportJson "policy-report.json" -OutputPath "policy-report.html"
      
      Write-Host "--- Uploading policy validation results"
      buildkite-agent artifact upload "policy-report.json"
      buildkite-agent artifact upload "policy-report.html"
      
      # Send notification if there are violations
      if (-not $overallResult) {
        Write-Host "--- Sending policy violation notification"
        try {
          $violationCount = ($allResults | Where-Object { $_.violations }).Count
          $notificationFields = @{
            "Violations" = $violationCount
            "OCI Package" = "{{inputs.conftest_policy_oci_url}}"
          }
          
          .\scripts\send-notification.ps1 -Channel "webhook" -WebhookUrl "{{inputs.webhook_url}}" -Message "Policy violations detected in {{inputs.project_name}}" -Title "🚨 Policy Violations" -Fields $notificationFields
        } catch {
          Write-Host "⚠️ Could not send notification: $($_.Exception.Message)"
        }
      }
      
      if (-not $overallResult) {
        Write-Host "❌ Policy validation failed - see policy-report.html for details"
        exit 1
      }
      
      Write-Host "✅ All policy validations passed across all namespaces"
    artifact_paths:
      - "policy-report.json"
      - "policy-report.html"
    env:
      VAULT_ADDR: "https://vault.company.com"
      VAULT_NAMESPACE: "{{inputs.vault_namespace}}"
    agents:
      queue: "windows"

  - label: ":robot_face: Auto Documentation"
    key: "auto-docs"
    depends_on: "format-check"
    command: |
      Write-Host "--- Generating documentation for {{inputs.project_name}}"
      Invoke-WebRequest -Uri "https://github.com/terraform-docs/terraform-docs/releases/latest/download/terraform-docs-v0.16.0-windows-amd64.zip" -OutFile "terraform-docs.zip"
      Expand-Archive -Path "terraform-docs.zip" -DestinationPath "."
      
      .\terraform-docs.exe markdown table --output-file README-generated.md .
      
      if (Test-Path "modules/") {
        Get-ChildItem -Directory -Path "modules" | ForEach-Object {
          .\terraform-docs.exe markdown table --output-file "$($_.Name)-README.md" $_.FullName
        }
      }
      
      buildkite-agent artifact upload "README-generated.md"
      buildkite-agent artifact upload "*-README.md"
    artifact_paths:
      - "README-generated.md"
      - "*-README.md"
    agents:
      queue: "windows"
    if: "'{{inputs.enable_auto_documentation}} == true'"



  # Wait for validation phase to complete
  - wait:
    continue_on_failure: false

  # ====================
  # DYNAMIC ENVIRONMENT DEPLOYMENT
  # ====================

  # Generate deployment steps dynamically based on TARGET_ENVIRONMENTS
  - label: ":gear: Generate Environment Deployments"
    key: "generate-deployments"
    command: |
      Write-Host "--- Generating deployment steps for environments: {{inputs.target_environments}}"
      
      $environments = "{{inputs.target_environments}}" -split ","
      $deploymentSteps = @()
      
      foreach ($environment in $environments) {
        $env_clean = $environment.Trim()
        $env_name = switch ($env_clean) {
          "dev" { "Development" }
          "tst" { "Test" }
          "stg" { "Staging" }
          "prd" { "Production" }
          default { $env_clean.ToUpper() }
        }
        
        # Create approval step if required
        if ("{{inputs.require_approval}}" -eq "true" -or $env_clean -eq "prd") {
          $approvalStep = @{
            block = "Deploy to $env_name?"
            key = "approve-$env_clean"
            prompt = "Deploy {{inputs.project_name}} to $env_name environment?"
            fields = @(
              @{
                select = "confirmation"
                key = "deploy_$env_clean"
                options = @(
                  @{label = "Yes, deploy to $env_name"; value = "yes"}
                  @{label = "No, skip $env_name"; value = "no"}
                )
                default = "no"
                required = $true
              }
            )
          }
          
          if ($env_clean -eq "prd") {
            $approvalStep.fields += @{
              text = "deployment_reason"
              key = "reason_$env_clean"
              hint = "Please provide a reason for this $env_name deployment"
              required = $true
            }
          }
          
          $deploymentSteps += $approvalStep
        }
        
        # Create deployment step
        $deploymentStep = @{
          label = "🚀 Deploy to $env_name"
          key = "deploy-$env_clean"
          command = @"
          Write-Host "--- Deploying {{inputs.project_name}} to $env_name Environment"

          Write-Host "--- Authenticating to Vault"
          export VAULT_TOKEN=`$(vault write -field=token auth/jwt/login \
            role=buildkite-role \
            jwt="`$env:BUILDKITE_JWT_TOKEN")

          Write-Host "--- Retrieving MinIO credentials"
          `$env:AWS_ACCESS_KEY_ID = vault kv get -field=access_key secret/minio/terraform
          `$env:AWS_SECRET_ACCESS_KEY = vault kv get -field=secret_key secret/minio/terraform

            Write-Host "--- Retrieving Mondoo credentials"
            `$env:TF_VAR_mondoo_service_account_token = vault kv get -field=token {{inputs.vault_namespace}}/secret/data/mondoo

            Write-Host "--- Retrieving $env_clean environment secrets"
            `$env:TF_VAR_db_password = vault kv get -field=db_password secret/{{inputs.vault_namespace}}/$env_clean
            `$env:TF_VAR_api_key = vault kv get -field=api_key secret/{{inputs.vault_namespace}}/$env_clean
            `$env:TF_VAR_project_name = "{{inputs.project_name}}"
            `$env:TF_VAR_service_name = "{{inputs.service_name}}"
            `$env:TF_VAR_team_name = "{{inputs.team_name}}"
            `$env:TF_VAR_environment = "$env_clean"

            Write-Host "--- Downloading plan file"
            buildkite-agent artifact download "tfplan" .

            Write-Host "--- Initializing OpenTofu for $env_clean"
            tofu init

            Write-Host "--- Executing deployment"
            tofu apply -auto-approve tfplan

            Write-Host "--- Post-deployment validation"
            `$appUrl = tofu output -raw application_url -ErrorAction SilentlyContinue
            if (`$appUrl) {
              Write-Host "--- Running smoke tests"
              .\scripts\smoke-tests.ps1 -BaseUrl `$appUrl
            }

            Write-Host "--- Generating outputs"
            tofu output -json | Out-File -FilePath "$env_clean-outputs.json" -Encoding utf8

            buildkite-agent artifact upload "$env_clean-outputs.json"

            Write-Host "✅ Deployment to $env_name completed successfully"

          $deploymentStep = @{
          label = "🚀 Deploy to $env_name"
          key = "deploy-$env_clean"
          command = $deployCommand
          artifact_paths = @("$env_clean-outputs.json")
          env = @{
            VAULT_ADDR = "https://vault.company.com"
            VAULT_NAMESPACE = "{{inputs.vault_namespace}}"
            TF_WORKSPACE = $env_clean
          }
          agents = @{queue = "windows"}
        }
                
        # Add conditional execution for approval-required environments
        if ("{{inputs.require_approval}}" -eq "true" -or $env_clean -eq "prd") {
          $deploymentStep["if"] = "build.env(`"deploy_$env_clean`") == `"yes`""
        }
        
        $deploymentSteps += $deploymentStep
      }
      
      # Convert to YAML and upload as new pipeline steps
      $pipelineYaml = @{steps = $deploymentSteps} | ConvertTo-Yaml
      $pipelineYaml | Out-File "deployment-pipeline.yml" -Encoding utf8
      
      buildkite-agent pipeline upload deployment-pipeline.yml
      
      Write-Host "✅ Generated deployment steps for: $($environments -join ', ')"
    agents:
      queue: "windows"

  # ====================
  # POST-DEPLOYMENT CLEANUP
  # ====================
  
  - label: ":broom: Intelligent Cleanup"
    key: "cleanup"
    command: |
      Write-Host "--- Running intelligent cleanup for {{inputs.project_name}}"
      
      # Generate cleanup report and perform cleanup
      .\scripts\generate-cleanup-report.ps1 -OutputPath "cleanup-report.json" -ProjectName "{{inputs.project_name}}" -RetentionDays "{{inputs.backup_retention_days}}"
      
      buildkite-agent artifact upload "cleanup-report.json"
      Write-Host "✅ Cleanup completed for {{inputs.project_name}}"
    artifact_paths:
      - "cleanup-report.json"
    agents:
      queue: "windows"

  # ====================
  # VERSIONING & RELEASE PHASE
  # ====================

  - label: ":1234: Semantic Versioning"
    key: "semantic-versioning"
    command: |
      Write-Host "--- Generating semantic version for {{inputs.project_name}}"
      
      # Determine if this is main branch or PR
      $isMainBranch = ($env:BUILDKITE_BRANCH -eq "main" -or $env:BUILDKITE_BRANCH -eq "master")
      $isPullRequest = ($env:BUILDKITE_PULL_REQUEST -and $env:BUILDKITE_PULL_REQUEST -ne "false")
      
      Write-Host "Branch: $env:BUILDKITE_BRANCH"
      Write-Host "Is main branch: $isMainBranch"
      Write-Host "Is pull request: $isPullRequest"
      
      # Generate version
      if ($isMainBranch) {
        .\scripts\generate-version.ps1 -OutputPath "version-info.json" -IsMainBranch
      } elseif ($isPullRequest) {
        .\scripts\generate-version.ps1 -OutputPath "version-info.json" -IsPullRequest
      } else {
        .\scripts\generate-version.ps1 -OutputPath "version-info.json"
      }
      
      buildkite-agent artifact upload "version-info.json"
      Write-Host "✅ Semantic versioning completed for {{inputs.project_name}}"
    artifact_paths:
      - "version-info.json"
    agents:
      queue: "windows"
    if: build.env("ENABLE_SEMANTIC_VERSIONING") == "true"

  - label: ":memo: Validate Conventional Commits"
    key: "validate-commits"
    command: |
      Write-Host "--- Validating conventional commit messages for {{inputs.project_name}}"
      
      # Install Node.js dependencies from consumer repo
      if (Test-Path "package.json") {
        Write-Host "Installing NPM dependencies from consumer repo..."
        npm install
      } else {
        Write-Host "No package.json found, installing commitlint manually..."
        npm install --no-save @commitlint/cli @commitlint/config-conventional
      }
      
      # Use commitlint config from consumer repo
      $commitlintConfig = if (Test-Path "commitlint.config.js") { 
        "commitlint.config.js" 
      } else { 
        Write-Warning "commitlint.config.js not found in consumer repo, using default config"
        "@commitlint/config-conventional"
      }
      
      Write-Host "Using commitlint config: $commitlintConfig"
      
      # Validate commit messages
      if (Test-Path "commitlint.config.js") {
        .\scripts\validate-conventional-commits.ps1 -ConfigPath $commitlintConfig
      } else {
        # Use default validation if no config file
        npx commitlint --from=HEAD~1 --to=HEAD --config '@commitlint/config-conventional'
      }
      
      Write-Host "✅ Conventional commit validation completed"
    agents:
      queue: "windows"
    if: build.env("VALIDATE_CONVENTIONAL_COMMITS") == "true"

  - label: ":scroll: Generate Changelog"
    key: "generate-changelog"
    depends_on: ["semantic-versioning"]
    command: |
      Write-Host "--- Generating changelog for {{inputs.project_name}}"
      
      # Install Node.js dependencies from consumer repo
      if (Test-Path "package.json") {
        Write-Host "Installing NPM dependencies from consumer repo..."
        npm install
      } else {
        Write-Host "No package.json found, installing auto-changelog manually..."
        npm install --no-save auto-changelog
      }
      
      # Download version info
      buildkite-agent artifact download "version-info.json" .
      
      # Use auto-changelog config from consumer repo
      $changelogConfig = if (Test-Path "auto-changelog.json") { 
        "auto-changelog.json" 
      } else { 
        Write-Warning "auto-changelog.json not found in consumer repo, using default settings"
        $null
      }
      
      if ($changelogConfig) {
        Write-Host "Using changelog config: $changelogConfig"
        .\scripts\generate-changelog.ps1 -VersionInfoPath "version-info.json" -OutputPath "CHANGELOG.md" -ConfigPath $changelogConfig
      } else {
        Write-Host "Using default changelog settings"
        .\scripts\generate-changelog.ps1 -VersionInfoPath "version-info.json" -OutputPath "CHANGELOG.md"
      }
      
      buildkite-agent artifact upload "CHANGELOG.md"
      buildkite-agent artifact upload "changelog-metadata.json"
      
      Write-Host "✅ Changelog generation completed for {{inputs.project_name}}"
    artifact_paths:
      - "CHANGELOG.md"
      - "changelog-metadata.json"
    agents:
      queue: "windows"
    if: build.env("ENABLE_CHANGELOG_GENERATION") == "true"

# ====================
# NOTIFICATIONS
# ====================

notify:
  - webhook: "{{inputs.webhook_url}}"
    if: build.state == "failed"
    message: |
      {
        "alert_type": "pipeline_failure",
        "project": "{{inputs.project_name}}",
        "service": "{{inputs.service_name}}",
        "team": "{{inputs.team_name}}",
        "environments": "{{inputs.target_environments}}",
        "build_url": "${BUILDKITE_BUILD_URL}",
        "commit": "${BUILDKITE_COMMIT}",
        "branch": "${BUILDKITE_BRANCH}",
        "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
        "severity": "high",
        "message": "Terraform pipeline failed"
      }

  - webhook: "{{inputs.webhook_url}}"
    if: build.state == "passed"
    message: |
      {
        "alert_type": "pipeline_success",
        "project": "{{inputs.project_name}}",
        "service": "{{inputs.service_name}}",
        "team": "{{inputs.team_name}}",
        "environments": "{{inputs.target_environments}}",
        "build_url": "${BUILDKITE_BUILD_URL}",
        "commit": "${BUILDKITE_COMMIT}",
        "branch": "${BUILDKITE_BRANCH}",
        "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
        "severity": "info",
        "message": "Terraform pipeline completed successfully"
      }
